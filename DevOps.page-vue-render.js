
    const renderFn = new Function("const { createElementVNode: _createElementVNode, createTextVNode: _createTextVNode, createStaticVNode: _createStaticVNode, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = Vue\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"ul\", { toc: \"\" }, [\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"Table of Contents\")\n], -1 /* HOISTED */)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", { id: \"build-automation\" }, [\n  /*#__PURE__*/_createTextVNode(\"Build automation\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#build-automation\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"This project uses Gradle for \"),\n  /*#__PURE__*/_createElementVNode(\"strong\", null, \"build automation and dependency management\"),\n  /*#__PURE__*/_createTextVNode(\". \"),\n  /*#__PURE__*/_createElementVNode(\"strong\", null, [\n    /*#__PURE__*/_createTextVNode(\"You are recommended to read \"),\n    /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://se-education.org/guides/tutorials/gradle.html\" }, \"this Gradle Tutorial from the se-edu/guides\")\n  ]),\n  /*#__PURE__*/_createTextVNode(\".\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Given below are how to use Gradle for some important project tasks.\", -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/_createStaticVNode(\"<ul><li><p><strong><code class=\\\"hljs inline no-lang\\\">clean</code></strong>: Deletes the files created during the previous build tasks (e.g. files in the <code class=\\\"hljs inline no-lang\\\">build</code> folder).<br>\\ne.g. <code class=\\\"hljs inline no-lang\\\">./gradlew clean</code></p></li> <li><p><strong><code class=\\\"hljs inline no-lang\\\">shadowJar</code></strong>: Uses the ShadowJar plugin to create a fat JAR file in the <code class=\\\"hljs inline no-lang\\\">build/lib</code> folder, <em>if the current file is outdated</em>.<br>\\ne.g. <code class=\\\"hljs inline no-lang\\\">./gradlew shadowJar</code>.</p></li> <li><p><strong><code class=\\\"hljs inline no-lang\\\">run</code></strong>: Builds and runs the application.<br> <strong><code class=\\\"hljs inline no-lang\\\">runShadow</code></strong>: Builds the application as a fat JAR, and then runs it.</p></li> <li><p><strong><code class=\\\"hljs inline no-lang\\\">checkstyleMain</code></strong>: Runs the code style check for the main code base.<br> <strong><code class=\\\"hljs inline no-lang\\\">checkstyleTest</code></strong>: Runs the code style check for the test code base.</p></li> <li><p><strong><code class=\\\"hljs inline no-lang\\\">test</code></strong>: Runs all tests.</p> <ul><li><code class=\\\"hljs inline no-lang\\\">./gradlew test</code> — Runs all tests</li> <li><code class=\\\"hljs inline no-lang\\\">./gradlew clean test</code> — Cleans the project and runs tests</li></ul></li></ul>\", 1)\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"h2\", { id: \"continuous-integration-ci\" }, [\n  /*#__PURE__*/_createTextVNode(\"Continuous integration (CI)\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#continuous-integration-ci\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the \"),\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \".github/workflows\"),\n  /*#__PURE__*/_createTextVNode(\" folder). No further setting up required.\")\n], -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"h3\", { id: \"code-coverage\" }, [\n  /*#__PURE__*/_createTextVNode(\"Code coverage\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#code-coverage\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"p\", null, \"As part of CI, this project uses Codecov to generate coverage reports. When CI runs, it will generate code coverage data (based on the tests run by CI) and upload that data to the CodeCov website, which in turn can provide you more info about the coverage of your tests.\", -1 /* HOISTED */)\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"p\", null, \"However, because Codecov is known to run into intermittent problems (e.g., report upload fails) due to issues on the Codecov service side, the CI is configured to pass even if the Codecov task failed. Therefore, developers are advised to check the code coverage levels periodically and take corrective actions if the coverage level falls below desired levels.\", -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createTextVNode(\"To enable Codecov for forks of this project, follow the steps given in \"),\n  /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://se-education.org/guides/tutorials/codecov.html\" }, \"this se-edu guide\"),\n  /*#__PURE__*/_createTextVNode(\".\")\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"h3\", { id: \"repository-wide-checks\" }, [\n  /*#__PURE__*/_createTextVNode(\"Repository-wide checks\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#repository-wide-checks\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"p\", null, \"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.\", -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"p\", null, \"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:\", -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"./config/travis/run-checks.sh\")\n], -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Any warnings or errors will be printed out to the console.\", -1 /* HOISTED */)\nconst _hoisted_19 = /*#__PURE__*/_createElementVNode(\"p\", null, [\n  /*#__PURE__*/_createElementVNode(\"strong\", null, \"If adding new checks:\")\n], -1 /* HOISTED */)\nconst _hoisted_20 = /*#__PURE__*/_createStaticVNode(\"<ul><li><p>Checks are implemented as executable <code class=\\\"hljs inline no-lang\\\">check-*</code> scripts within the <code class=\\\"hljs inline no-lang\\\">.github</code> directory. The <code class=\\\"hljs inline no-lang\\\">run-checks.sh</code> script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.</p></li> <li><p>Check scripts should print out errors in the format <code class=\\\"hljs inline no-lang\\\">SEVERITY:FILENAME:LINE: MESSAGE</code></p> <ul><li>SEVERITY is either ERROR or WARN.</li> <li>FILENAME is the path to the file relative to the current directory.</li> <li>LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.</li></ul></li> <li><p>Check scripts must exit with a non-zero exit code if any errors occur.</p></li></ul>\", 1)\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */)\nconst _hoisted_22 = /*#__PURE__*/_createElementVNode(\"h2\", { id: \"making-a-release\" }, [\n  /*#__PURE__*/_createTextVNode(\"Making a release\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#making-a-release\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Here are the steps to create a new release.\", -1 /* HOISTED */)\nconst _hoisted_24 = /*#__PURE__*/_createStaticVNode(\"<ol><li>Update the version number in <a href=\\\"https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java\\\"><code class=\\\"hljs inline no-lang\\\">MainApp.java</code></a>.</li> <li>Generate a fat JAR file using Gradle (i.e., <code class=\\\"hljs inline no-lang\\\">gradlew shadowJar</code>).</li> <li>Tag the repo with the version number. e.g. <code class=\\\"hljs inline no-lang\\\">v0.1</code></li> <li><a href=\\\"https://help.github.com/articles/creating-releases/\\\">Create a new release using GitHub</a>. Upload the JAR file you created.</li></ol>\", 1)\n\nreturn function render(_ctx, _cache) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _createTextVNode(),\n    _hoisted_2,\n    _createTextVNode(),\n    _hoisted_3,\n    _createTextVNode(),\n    _hoisted_4,\n    _createTextVNode(),\n    _hoisted_5,\n    _createTextVNode(),\n    _hoisted_6,\n    _createTextVNode(),\n    _hoisted_7,\n    _createTextVNode(),\n    _hoisted_8,\n    _createTextVNode(),\n    _hoisted_9,\n    _createTextVNode(),\n    _hoisted_10,\n    _createTextVNode(),\n    _hoisted_11,\n    _createTextVNode(),\n    _hoisted_12,\n    _createTextVNode(),\n    _hoisted_13,\n    _createTextVNode(),\n    _hoisted_14,\n    _createTextVNode(),\n    _hoisted_15,\n    _createTextVNode(),\n    _hoisted_16,\n    _createTextVNode(),\n    _hoisted_17,\n    _createTextVNode(),\n    _hoisted_18,\n    _createTextVNode(),\n    _hoisted_19,\n    _createTextVNode(),\n    _hoisted_20,\n    _createTextVNode(),\n    _hoisted_21,\n    _createTextVNode(),\n    _hoisted_22,\n    _createTextVNode(),\n    _hoisted_23,\n    _createTextVNode(),\n    _hoisted_24\n  ], 64 /* STABLE_FRAGMENT */))\n}");
    var render = renderFn();
  