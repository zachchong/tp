
    const renderFn = new Function("const { createElementVNode: _createElementVNode, createTextVNode: _createTextVNode, createStaticVNode: _createStaticVNode, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = Vue\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"ul\", { toc: \"\" }, [\n  /*#__PURE__*/_createElementVNode(\"li\", null, \"Table of Contents\")\n], -1 /* HOISTED */)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", { id: \"running-tests\" }, [\n  /*#__PURE__*/_createTextVNode(\"Running tests\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#running-tests\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, \"There are two ways to run tests.\", -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/_createStaticVNode(\"<ul><li><strong>Method 1: Using IntelliJ JUnit test runner</strong> <ul><li>To run all tests, right-click on the <code class=\\\"hljs inline no-lang\\\">src/test/java</code> folder and choose <code class=\\\"hljs inline no-lang\\\">Run &#39;All Tests&#39;</code></li> <li>To run a subset of tests, you can right-click on a test package,\\ntest class, or a test and choose <code class=\\\"hljs inline no-lang\\\">Run &#39;ABC&#39;</code></li></ul></li> <li><strong>Method 2: Using Gradle</strong> <ul><li>Open a console and run the command <code class=\\\"hljs inline no-lang\\\">gradlew clean test</code> (Mac/Linux: <code class=\\\"hljs inline no-lang\\\">./gradlew clean test</code>)</li></ul></li></ul>\", 1)\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  markdown: \"span\",\n  class: \"alert alert-secondary\"\n}, \":link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.\\n\", -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */)\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"h2\", { id: \"types-of-tests\" }, [\n  /*#__PURE__*/_createTextVNode(\"Types of tests\"),\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    class: \"fa fa-anchor\",\n    href: \"#types-of-tests\",\n    onclick: \"event.stopPropagation()\"\n  })\n], -1 /* HOISTED */)\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"p\", null, \"This project has three types of tests:\", -1 /* HOISTED */)\nconst _hoisted_10 = /*#__PURE__*/_createStaticVNode(\"<ol><li><em>Unit tests</em> targeting the lowest level methods/classes.<br>\\ne.g. <code class=\\\"hljs inline no-lang\\\">presspal.contact.commons.StringUtilTest</code></li> <li><em>Integration tests</em> that are checking the integration of multiple code units (those code units are assumed to be working).<br>\\ne.g. <code class=\\\"hljs inline no-lang\\\">presspal.contact.storage.StorageManagerTest</code></li> <li>Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.<br>\\ne.g. <code class=\\\"hljs inline no-lang\\\">presspal.contact.logic.LogicManagerTest</code></li></ol>\", 1)\n\nreturn function render(_ctx, _cache) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _createTextVNode(),\n    _hoisted_2,\n    _createTextVNode(),\n    _hoisted_3,\n    _createTextVNode(),\n    _hoisted_4,\n    _createTextVNode(),\n    _hoisted_5,\n    _createTextVNode(),\n    _hoisted_6,\n    _createTextVNode(),\n    _hoisted_7,\n    _createTextVNode(),\n    _hoisted_8,\n    _createTextVNode(),\n    _hoisted_9,\n    _createTextVNode(),\n    _hoisted_10\n  ], 64 /* STABLE_FRAGMENT */))\n}");
    var render = renderFn();
  